// src/node/markdown-it-mermaidx.ts
import * as pkg from "@ziho/suitcase";
var { htmlEscape } = pkg;
var markdown_it_mermaidx_default = (md) => {
  const originFence = md.renderer.rules.fence.bind(md.renderer.rules);
  md.renderer.rules.fence = (...args) => {
    const [tokens, idx] = args;
    const { info: languageType, content } = tokens[idx];
    if (content && languageType.trim() === "mermaid") {
      return `
      <h-mermaid 
      code="${htmlEscape(content.trim())}"
      config="${JSON.stringify(md.__mermaidConfig).replace(/\"/g, "'")}"
      ></h-mermaid>
      `;
    }
    return `${originFence(...args)}`;
  };
};

// src/node/index.ts
import { getDirname, path } from "@vuepress/utils";
var __vite_injected_original_import_meta_url = "file:///Users/howe/Documents/GitHub/public/vuepress-plugin-mermaid/src/node/index.ts";
var __dirname = getDirname(__vite_injected_original_import_meta_url);
console.log(__dirname);
var node_default = (opt = {}) => ({
  name: "vuepress-plugin-mermaid-next",
  clientConfigFile: path.resolve(__dirname, "../client/config.js"),
  extendsMarkdown: (md) => {
    md.__mermaidConfig = opt;
    md.use(markdown_it_mermaidx_default);
  }
});

// docs/.vuepress/config.ts
import { defineUserConfig } from "vuepress";
var config_default = defineUserConfig({
  plugins: [
    node_default({})
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL25vZGUvbWFya2Rvd24taXQtbWVybWFpZHgudHMiLCAic3JjL25vZGUvaW5kZXgudHMiLCAiZG9jcy8udnVlcHJlc3MvY29uZmlnLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2hvd2UvRG9jdW1lbnRzL0dpdEh1Yi9wdWJsaWMvdnVlcHJlc3MtcGx1Z2luLW1lcm1haWQvc3JjL25vZGVcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9ob3dlL0RvY3VtZW50cy9HaXRIdWIvcHVibGljL3Z1ZXByZXNzLXBsdWdpbi1tZXJtYWlkL3NyYy9ub2RlL21hcmtkb3duLWl0LW1lcm1haWR4LnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9ob3dlL0RvY3VtZW50cy9HaXRIdWIvcHVibGljL3Z1ZXByZXNzLXBsdWdpbi1tZXJtYWlkL3NyYy9ub2RlL21hcmtkb3duLWl0LW1lcm1haWR4LnRzXCI7aW1wb3J0ICogYXMgcGtnIGZyb20gJ0B6aWhvL3N1aXRjYXNlJ1xuY29uc3QgeyBodG1sRXNjYXBlIH0gPSBwa2dcblxuZXhwb3J0IGRlZmF1bHQgKG1kOiBhbnkpOiB2b2lkID0+IHtcbiAgY29uc3Qgb3JpZ2luRmVuY2UgPSBtZC5yZW5kZXJlci5ydWxlcy5mZW5jZS5iaW5kKG1kLnJlbmRlcmVyLnJ1bGVzKVxuICBtZC5yZW5kZXJlci5ydWxlcy5mZW5jZSA9ICguLi5hcmdzOiBhbnkpID0+IHtcbiAgICBjb25zdCBbdG9rZW5zLCBpZHhdID0gYXJnc1xuICAgIGNvbnN0IHsgaW5mbzogbGFuZ3VhZ2VUeXBlLCBjb250ZW50IH0gPSB0b2tlbnNbaWR4XVxuICAgIGlmIChjb250ZW50ICYmIGxhbmd1YWdlVHlwZS50cmltKCkgPT09ICdtZXJtYWlkJykge1xuICAgICAgcmV0dXJuIGBcbiAgICAgIDxoLW1lcm1haWQgXG4gICAgICBjb2RlPVwiJHtodG1sRXNjYXBlKGNvbnRlbnQudHJpbSgpKX1cIlxuICAgICAgY29uZmlnPVwiJHtKU09OLnN0cmluZ2lmeShtZC5fX21lcm1haWRDb25maWcpLnJlcGxhY2UoL1xcXCIvZywgJ1xcJycpfVwiXG4gICAgICA+PC9oLW1lcm1haWQ+XG4gICAgICBgXG4gICAgfVxuICAgIHJldHVybiBgJHtvcmlnaW5GZW5jZSguLi5hcmdzKX1gXG4gIH1cbn1cbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2hvd2UvRG9jdW1lbnRzL0dpdEh1Yi9wdWJsaWMvdnVlcHJlc3MtcGx1Z2luLW1lcm1haWQvc3JjL25vZGVcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9ob3dlL0RvY3VtZW50cy9HaXRIdWIvcHVibGljL3Z1ZXByZXNzLXBsdWdpbi1tZXJtYWlkL3NyYy9ub2RlL2luZGV4LnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9ob3dlL0RvY3VtZW50cy9HaXRIdWIvcHVibGljL3Z1ZXByZXNzLXBsdWdpbi1tZXJtYWlkL3NyYy9ub2RlL2luZGV4LnRzXCI7aW1wb3J0IE1lcm1haWRQbHVnaW4gZnJvbSAnLi9tYXJrZG93bi1pdC1tZXJtYWlkeCdcbmltcG9ydCB7IGdldERpcm5hbWUsIHBhdGggfSBmcm9tICdAdnVlcHJlc3MvdXRpbHMnXG5cbmNvbnN0IF9fZGlybmFtZSA9IGdldERpcm5hbWUoaW1wb3J0Lm1ldGEudXJsKVxuXG5jb25zb2xlLmxvZyhfX2Rpcm5hbWUpXG5cbmV4cG9ydCBkZWZhdWx0IChvcHQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4+ID0ge30pID0+ICh7XG4gIG5hbWU6ICd2dWVwcmVzcy1wbHVnaW4tbWVybWFpZC1uZXh0JyxcbiAgY2xpZW50Q29uZmlnRmlsZTogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL2NsaWVudC9jb25maWcuanMnKSxcbiAgZXh0ZW5kc01hcmtkb3duOiAobWQ6IGFueSkgPT4ge1xuICAgIG1kLl9fbWVybWFpZENvbmZpZyA9IG9wdFxuICAgIG1kLnVzZShNZXJtYWlkUGx1Z2luKVxuICB9XG59KVxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvaG93ZS9Eb2N1bWVudHMvR2l0SHViL3B1YmxpYy92dWVwcmVzcy1wbHVnaW4tbWVybWFpZC9kb2NzLy52dWVwcmVzc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2hvd2UvRG9jdW1lbnRzL0dpdEh1Yi9wdWJsaWMvdnVlcHJlc3MtcGx1Z2luLW1lcm1haWQvZG9jcy8udnVlcHJlc3MvY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9ob3dlL0RvY3VtZW50cy9HaXRIdWIvcHVibGljL3Z1ZXByZXNzLXBsdWdpbi1tZXJtYWlkL2RvY3MvLnZ1ZXByZXNzL2NvbmZpZy50c1wiO2ltcG9ydCBtZXJtYWlkUGx1Z2luIGZyb20gJy4uLy4uL3NyYy9ub2RlL2luZGV4J1xuaW1wb3J0IHsgZGVmaW5lVXNlckNvbmZpZyB9IGZyb20gJ3Z1ZXByZXNzJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVVc2VyQ29uZmlnKHtcbiAgcGx1Z2luczogW1xuICAgIG1lcm1haWRQbHVnaW4oe30pXG4gIF1cbn0pXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWdaLFlBQVksU0FBUztBQUNyYSxJQUFNLEVBQUUsV0FBVyxJQUFJO0FBRXZCLElBQU8sK0JBQVEsQ0FBQyxPQUFrQjtBQUNoQyxRQUFNLGNBQWMsR0FBRyxTQUFTLE1BQU0sTUFBTSxLQUFLLEdBQUcsU0FBUyxLQUFLO0FBQ2xFLEtBQUcsU0FBUyxNQUFNLFFBQVEsSUFBSSxTQUFjO0FBQzFDLFVBQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSTtBQUN0QixVQUFNLEVBQUUsTUFBTSxjQUFjLFFBQVEsSUFBSSxPQUFPO0FBQy9DLFFBQUksV0FBVyxhQUFhLEtBQUssTUFBTSxXQUFXO0FBQ2hELGFBQU87QUFBQTtBQUFBLGNBRUMsV0FBVyxRQUFRLEtBQUssQ0FBQztBQUFBLGdCQUN2QixLQUFLLFVBQVUsR0FBRyxlQUFlLEVBQUUsUUFBUSxPQUFPLEdBQUk7QUFBQTtBQUFBO0FBQUEsSUFHbEU7QUFDQSxXQUFPLEdBQUcsWUFBWSxHQUFHLElBQUk7QUFBQSxFQUMvQjtBQUNGOzs7QUNqQkEsU0FBUyxZQUFZLFlBQVk7QUFEeU0sSUFBTSwyQ0FBMkM7QUFHM1IsSUFBTSxZQUFZLFdBQVcsd0NBQWU7QUFFNUMsUUFBUSxJQUFJLFNBQVM7QUFFckIsSUFBTyxlQUFRLENBQUMsTUFBaUQsQ0FBQyxPQUFPO0FBQUEsRUFDdkUsTUFBTTtBQUFBLEVBQ04sa0JBQWtCLEtBQUssUUFBUSxXQUFXLHFCQUFxQjtBQUFBLEVBQy9ELGlCQUFpQixDQUFDLE9BQVk7QUFDNUIsT0FBRyxrQkFBa0I7QUFDckIsT0FBRyxJQUFJLDRCQUFhO0FBQUEsRUFDdEI7QUFDRjs7O0FDYkEsU0FBUyx3QkFBd0I7QUFFakMsSUFBTyxpQkFBUSxpQkFBaUI7QUFBQSxFQUM5QixTQUFTO0FBQUEsSUFDUCxhQUFjLENBQUMsQ0FBQztBQUFBLEVBQ2xCO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
